@model IEnumerable<Project.Models.Tchat>
@section styles{
    <style>
        /* 主要佈局 */
        .chatRoom_container {
            width: 100%; /* 使容器寬度填滿父容器 */
            height: 100vh; /* 高度設為視窗高度 */
            display: flex; /* 使用 flex 排版 */
            margin: 0 auto; /* 水平居中 */
            position: relative; /* 用於定位內部元素 */
            background: #f4f7f9; /* 背景色設為淡灰藍 */
            border-radius: 12px; /* 邊角圓潤 */
            overflow: hidden; /* 隱藏超出範圍的內容 */
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1); /* 添加陰影效果 */
        }

        /* 左側聊天列表 */
        .chat_list {
            width: 25%; /* 設定左側聊天列表的寬度 */
            height: 100%; /* 高度填滿父容器 */
            background: white; /* 背景色為白色 */
            border-right: 1px solid #ddd; /* 右邊框線 */
            overflow-y: auto; /* 允許垂直滾動 */
            padding-top: 10px; /* 上方留空間 */
        }

        /* 聊天列表項目 */
        .chat_listtag {
            padding: 15px; /* 設定內邊距 */
            border-bottom: 1px solid #eee; /* 下邊框線 */
            cursor: pointer; /* 設為可點擊 */
            transition: background-color 0.3s ease-in-out; /* 背景色變化的過渡效果 */
            display: flex; /* 使用 flex 排版 */
            justify-content: space-between; /* 項目間距均勻分布 */
            align-items: center; /* 垂直居中對齊 */
            border-radius: 8px; /* 邊角圓潤 */
        }

            .chat_listtag:hover {
                background-color: #e3eaf2; /* 滑鼠懸停時改變背景色 */
            }

        /* 未讀訊息標記 */
        .unread-count {
            background-color: #ff3b30; /* 背景顏色為紅色 */
            color: white; /* 文字顏色為白色 */
            font-weight: bold; /* 文字加粗 */
            border-radius: 50%; /* 圓形標籤 */
            padding: 5px 10px; /* 內邊距 */
            font-size: 12px; /* 字體大小 */
        }

        /* 聊天室主區域 */
        #chatRoom {
            width: 75%; /* 右側聊天區域寬度 */
            height: 100vh; /* 高度設為視窗高度 */
            display: flex; /* 使用 flex 排版 */
            flex-direction: column; /* 垂直排列 */
            background: white; /* 背景色為白色 */
            border-radius: 12px; /* 邊角圓潤 */
            overflow: hidden; /* 隱藏超出範圍的內容 */
        }

        /* 聊天視窗頭部 */
        .chat-widget-header {
            display: flex; /* 使用 flex 排版 */
            justify-content: space-between; /* 項目間距均勻分布 */
            align-items: center; /* 垂直居中對齊 */
            padding: 15px 20px; /* 上下、左右內邊距 */
            background: #007bff; /* 背景色為藍色 */
            color: white; /* 文字顏色為白色 */
            font-weight: bold; /* 文字加粗 */
            border-top-left-radius: 12px; /* 左上圓角 */
            border-top-right-radius: 12px; /* 右上圓角 */
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* 添加陰影效果 */
        }

        /* 聊天內容區域 */
        .chat-widget-context {
            flex: 1; /* 填滿剩餘空間 */
            padding: 20px; /* 內邊距 */
            display: flex; /* 使用 flex 排版 */
            flex-direction: column; /* 垂直排列 */
            overflow-y: auto; /* 允許垂直滾動 */
            background: #f8f9fa; /* 背景色為淺灰色 */
            scroll-behavior: smooth; /* 滾動過渡效果 */
        }

        /* 訊息樣式 */
        .chat-message {
            font-size: 15px; /* 設定字體大小 */
            line-height: 1.5; /* 設定行高 */
            margin-bottom: 12px; /* 設定下邊距 */
            padding: 10px 15px; /* 內邊距 */
            border-radius: 20px; /* 邊角圓潤 */
            max-width: 75%; /* 設定最大寬度 */
            word-wrap: break-word; /* 自動換行 */
            display: flex; /* 使用 flex 排版 */
            flex-direction: column; /* 垂直排列 */
        }

            /* 其他人的訊息 */
            .chat-message.received {
                background: #e0e7ef; /* 背景顏色為灰藍色 */
                color: black; /* 文字顏色為黑色 */
                align-self: flex-start; /* 向左對齊 */
            }

            /* 自己的訊息 */
            .chat-message.sent {
                background: #007bff; /* 背景顏色為藍色 */
                color: white; /* 文字顏色為白色 */
                align-self: flex-end; /* 向右對齊 */
            }

            /* 系統通知 */
            .chat-message.system {
                font-size: 13px; /* 字體大小設小 */
                text-align: center; /* 文字居中 */
                background: #f1f1f1; /* 背景顏色為淡灰色 */
                padding: 8px 12px; /* 內邊距 */
                border-radius: 12px; /* 邊角圓潤 */
                align-self: center; /* 居中顯示 */
            }

        /* 訊息輸入區 */
        .chat-widget-footer {
            padding: 10px 20px; /* 上下、左右內邊距 */
            background: #f8f9fa; /* 背景色為淡灰色 */
            border-top: 1px solid #ddd; /* 上邊框線 */
            display: flex; /* 使用 flex 排版 */
            align-items: center; /* 垂直居中對齊 */
        }

        /* 訊息輸入框 */
        .chat-widget-input {
            flex: 1; /* 填滿剩餘空間 */
            display: flex; /* 使用 flex 排版 */
            align-items: center; /* 垂直居中對齊 */
            background: white; /* 背景色為白色 */
            border: 1px solid #ced4da; /* 邊框顏色 */
            border-radius: 20px; /* 邊角圓潤 */
            padding: 10px; /* 內邊距 */
            gap: 12px; /* 項目間隙 */
        }

            /* 訊息輸入框內部 */
            .chat-widget-input input {
                flex: 1; /* 填滿剩餘空間 */
                border: none; /* 移除邊框 */
                outline: none; /* 移除聚焦時的邊框 */
                font-size: 15px; /* 設定字體大小 */
                background: transparent; /* 背景設為透明 */
            }

            /* 發送按鈕 */
            .chat-widget-input button {
                font-size: 18px; /* 字體大小 */
                background: #007bff; /* 背景色為藍色 */
                border: none; /* 移除邊框 */
                color: white; /* 文字顏色為白色 */
                padding: 10px; /* 內邊距 */
                border-radius: 50%; /* 按鈕圓形 */
                cursor: pointer; /* 變為可點擊狀態 */
                transition: background 0.2s ease-in-out; /* 背景色變化的過渡效果 */
            }

                .chat-widget-input button:hover {
                    background: #0056b3; /* 懸停時改變背景色 */
                }

        /* 檔案上傳按鈕 */
        .media-upload-area {
            display: flex; /* 使用 flex 排版 */
            gap: 10px; /* 項目間隙 */
        }

        .upload-btn {
            font-size: 16px; /* 字體大小 */
            padding: 6px 12px; /* 內邊距 */
            border-radius: 8px; /* 邊角圓潤 */
            border: none; /* 移除邊框 */
            cursor: pointer; /* 變為可點擊狀態 */
            background: #ddd; /* 背景顏色 */
            transition: background 0.2s ease-in-out; /* 背景色變化的過渡效果 */
        }

            .upload-btn:hover {
                background: #bbb; /* 懸停時改變背景色 */
            }

        /* 會員側邊欄 */
        .user_profile_sidebar {
            width: 300px; /* 設定側邊欄寬度 */
            height: 100%; /* 高度填滿父容器 */
            background: white; /* 背景色為白色 */
            box-shadow: -3px 0 10px rgba(0, 0, 0, 0.1); /* 添加陰影效果 */
            position: fixed; /* 固定在螢幕上 */
            right: -300px; /* 初始時將側邊欄隱藏在右邊 */
            transition: right 0.3s ease-in-out; /* 右側滑動效果 */
        }

            .user_profile_sidebar.active {
                right: 0; /* 顯示側邊欄 */
            }

    </style>
}
@{
    ViewData["Title"] = "ChatRoom";
}
<div id="chatApp">
    <!-- 主聊天界面 -->
    <div class="chatRoom_container">
        <!-- 左側聊天列表 -->
        <div class="chat_list" id="chatlist">
            <!-- 建立新聊天室按鈕 -->
            <div class="chat_listtag" id="createRoom">
                <i class="fas fa-plus"></i>
                <span>建立新聊天室</span>
            </div>
            <!-- 動態聊天列表將在此插入 -->
        </div>
        <!-- 主聊天區域 -->
        <div class="chat_container" id="chatRoom">
            <div class="chat-widget" ref="chatWidget">  
                <div class="card-header">
                    <div class="d-flex justify-content-between">
                        <label>聊天室：<span id="roomName">{{ activeRoomName }}</span></label>
                        <label>標題：<span id="title"></span></label>
                        <label>會員：<span id="userName" class="cursor-pointer"></span></label>
                    </div>
                </div>
            </div>
            <div class="chat-widget-context" ref="messagesContainer">
                <div v-for="(msg, index) in messages"
                     :key="index"
                     :class="['chat-message', msg.type]"
                     id="room">
                    <span v-html="msg.content"></span>               
                </div>
                <!-- 顯示「正在輸入」的訊息提示 -->
                <div v-if="isTyping" class="chat-message received">正在輸入...</div>
            </div>
            <div class="chat-widget-footer">
                <div class="chat-widget-input">
                    <!-- 媒體上傳和輸入區域 -->
                    <div class="media-upload-area">
                        <div class="media-upload-area">
                            <button class="upload-btn" title="上傳檔案" v-on:click="triggerFileInput(`file`)">
                                <i class="fas fa-paperclip"></i>
                            </button>
                            <button class="upload-btn" title="上傳圖片" v-on:click="triggerFileInput(`image`)">
                                <i class="fas fa-image"></i>
                            </button>
                            <button class="upload-btn" title="上傳影片" v-on:click="triggerFileInput(`video`)">
                                <i class="fas fa-video"></i>
                            </button>
                        </div>
                        <!-- 隱藏的 file input -->
                        <input type="file" ref="fileInput" v-on:change="handleFileUpload" style="display: none;">
                        <input type="file" ref="imageInput" accept="image/*" v-on:change="handleFileUpload" style="display: none;">
                        <input type="file" ref="videoInput" accept="video/*" v-on:change="handleFileUpload" style="display: none;">
                    </div>     
                    <!-- 雙向綁定 message -->
                    <!-- 按下 Enter 鍵觸發 SendMessage 方法 -->
                    <input type="text"
                           id="txtMSG"
                           ref="chatInput"
                           v-model="message"
                           @@keyup.enter="sendMessage"
                           placeholder="輸入訊息..." />
                    <button class="upload-btn" id="emojiPicker" title="表情符號">
                        <i class="fas fa-smile"></i>
                    </button>
                    <!-- 發送按鈕 -->
                    <button type="button" 
                            id="sent"
                            ref="chatsent"
                            @@click="sendMessage" 
                            :style="{ transform: message.trim() ? 'scale(1.1)' : 'scale(1)' }" 
                            title="發送訊息">
                        <i class="fas fa-paper-plane"></i>
                    </button>
                </div>
            </div>
        </div>
        <!-- 右側會員資料側邊欄 -->
        <div class="profile_overlay"></div>
        <div class="user_profile_sidebar">
                <!-- 個人資料內容將動態產生 -->
        </div>     
    </div>
</div>


@section scripts {  
    <script type="text/javascript"
            src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.11/signalr.min.js"></script>
    <script src="https://unpkg.com/vue@3/dist/vue.global.prod.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/vue/3.4.15/vue.global.prod.min.js"></script>
    <script type="text/javascript"
            src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        // 在Vue應用的data部分添加(或在外部定義)
        const fileTypeMap = {
            'file': { label: '檔案', accept: '*/*' },
            'image': { label: '圖片', accept: 'image/*' },
            'video': { label: '影片', accept: 'video/*' }
        };

        let messages = []; // 初始化
        const chatApp = Vue.createApp({
            data() {
                return {
                    userId: "2", // 目前登入的會員ID
                    userName: "帥哥", // 目前登入的會員名稱
                    chatId: "1", // 目前的聊天室ID
                    activeRoom: null, // 目前選中的聊天室
                    rooms: new Map(), // 儲存所有聊天室資訊
                    message: "", // 訊息內容
                    messages: [], 
                    isTyping: false, // 用來顯示用戶是否正在輸入訊息
                    hubConnection: null, // SignalR 連接對象
                    members: [] // 儲存會員列表
                }
            },
            // 組件載入時初始化
            async mounted() {
                try {
                    await this.initializeSignalRConnection();

                    // 載入聊天歷史
                    const savedMessages = sessionStorage.getItem("chatMessages");
                    if (savedMessages) {
                        this.messages = JSON.parse(savedMessages);
                    }

                    // 監聽消息變化以自動滾動
                    this.$watch(
                        () => this.messages.length,
                        () => this.$nextTick(this.scrollToBottom)
                    );
                } 
                catch (error) {
                    console.error("初始化失敗:", error);
                    Swal.fire({
                        title: '錯誤',
                        text: '連接聊天服務失敗，請重新整理頁面',
                        icon: 'error'
                    });
                }
            },
            methods: {
                // 初始化 SignalR 連線的方法
                async initializeSignalRConnection() {
                    try {
                        // 建立 SignalR 連線
                        this.hubConnection = new signalR.HubConnectionBuilder()
                            .withUrl(`https://localhost:7279/ChatRoom?room=${this.userId}`) // 設定 SignalR Hub 連線
                            .withAutomaticReconnect([0, 2000, 5000, 10000, null]) // 自動重連設置
                            .configureLogging(signalR.LogLevel.Debug) // 開啟詳細的日誌記錄
                            .build();

                        this.hubConnection.on("UpdContent", (msg) => {
                            console.log("收到伺服器訊息: ", msg);

                            // 確保 messages 是陣列
                            if (!Array.isArray(this.messages)) {
                                this.messages = [];
                            }

                            // 檢查消息是否有效
                            if (!msg || !msg.message) return;

                            // 根據消息類型添加不同樣式
                            const messageObj = {
                                type: msg.user === this.userId ? "sent" :
                                msg.user === "System" ? "system" : "received",
                                content: msg.message,
                                timestamp: msg.timestamp || new Date().toLocaleTimeString('en-US', { hour12: false })
                            };

                            // 添加消息到陣列
                            this.messages.push(messageObj);

                            // 儲存到 sessionStorage
                            sessionStorage.setItem("chatMessages", JSON.stringify(this.messages));

                            // 滾動到底部
                            this.$nextTick(this.scrollToBottom);
                        });
                        // 啟動連接
                        await this.hubConnection.start();
                        console.log("SignalR連接成功");
                    }
                    catch (err) {
                        // 錯誤處理
                        console.error("連線錯誤:", err);
                        // 將錯誤訊息加入聊天室
                        this.messages.push({
                            type: "system",
                            content: "無法連接到客服系統，請稍後再試"
                        });
                        // 顯示錯誤提示
                        Swal.fire({
                            title: '錯誤',
                            text: '無法連接到客服系統，請稍後再試',
                            icon: 'error'
                        });
                        // 3秒後重試
                        setTimeout(() => {
                            this.initializeSignalRConnection();
                        }, 3000);
                    }
                },
                // 發送訊息
                async sendMessage() {
                    // 檢查訊息是否為空
                    if (!this.message.trim()) return;

                    try {
                        // 儲存訊息內容並調用 SignalR 方法
                        await this.hubConnection.invoke("SendMessage", this.userId, this.message.trim());

                        // 清空輸入框
                        this.message = "";

                        // 重置輸入狀態
                        this.isTyping = false;

                    } 
                    catch (error) {
                        console.error("發送訊息失敗:", error);
                        // 顯示錯誤提示
                        Swal.fire({
                            title: '錯誤',
                            text: '發送訊息失敗，請稍後再試',
                            icon: 'error'
                        });
                    }
                },
                // 處理檔案上傳
                async handleFileUpload(event, fileType) {
                    const fileInput = event.target;
                    if (!fileInput.files || fileInput.files.length === 0) return;
                    const file = fileInput.files[0];
                    // 檢查檔案類型（如果需要限制）
                    if (fileTypeMap[fileType] && !file.type.startsWith(fileType + "/")) {
                        Swal.fire({
                            title: '錯誤',
                            text: `請選擇${fileTypeMap[fileType].label}檔案`,
                            icon: 'error'
                        });
                    }
                    // 顯示上傳中訊息
                    const loadingMsg = { type: "system", content: `正在上傳${fileTypeMap[fileType]?.label ?? "檔案"}...` };
                    this.messages.push(loadingMsg);
                    this.scrollToBottom();
                    try {
                        const formData = new FormData();
                        formData.append('file', file);
                        const response = await fetch('/Chat/UploadFile', { method: 'POST', body: formData });
                        // 移除載入訊息
                        this.messages.pop();
                        if (!response.ok) throw new Error(`HTTP 錯誤！狀態碼: ${response.status}`);
                        const result = await response.json();
                        if (result.success) {
                            let fileMessageContent = "";
                            if (fileType === "image") {
                                fileMessageContent = `<img src="${result.fileUrl}" alt="${result.originalName}" class="chat-image height:50% width:50%"/>`;
                            }
                            else if (fileType === "video") {
                                fileMessageContent = `<video controls class="chat-video"><source src="${result.fileUrl}" type="${result.contentType}"></video>`;
                            }
                            else {
                                fileMessageContent = `<div class="file-link"><a href="${result.fileUrl}" target="_blank" download="${result.originalName}"><i class="fas fa-file"></i> ${result.originalName}</a></div>`;
                            }
                            // 發送到聊天室
                            await this.hubConnection.invoke("SendMessage", this.userId, fileMessageContent);
                        }
                        else {
                            this.messages.push({ type: "system", content: `檔案上傳失敗：${result.message}` });
                        }
                    }
                    catch (error) {
                        console.error("檔案上傳失敗:", error);
                        this.messages.pop();
                        this.messages.push({ type: "system", content: "檔案上傳失敗，請稍後再試" });
                    }
                    finally {
                        this.scrollToBottom();
                        fileInput.value = ''; // 清空輸入框
                    }
                },
                triggerFileInput(fileType) {
                    const fileInput = document.createElement('input');
                    fileInput.type = 'file';
                    fileInput.style.display = 'none';
                    if (fileTypeMap[fileType]) {
                        fileInput.accept = fileTypeMap[fileType].accept;
                    }
                    fileInput.addEventListener('change', (event) => this.handleFileUpload(event, fileType));
                    document.body.appendChild(fileInput);
                    fileInput.click();
                    setTimeout(() => document.body.removeChild(fileInput), 100);
                },
                // 滾動到最新消息
                scrollToBottom() {
                    const container = this.$refs.messagesContainer;
                    if (container) {
                        container.scrollTop = container.scrollHeight;
                    }
                }
            }
        });
        // 啟動 Vue 應用
        chatApp.mount("#chatApp");
    </script>
}
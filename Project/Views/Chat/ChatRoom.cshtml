@model IEnumerable<Project.Models.Tchat>
@{
    ViewData["Title"] = "ChatRoom";
}
<h1>客服</h1>

<form class="row mt-3 g-3 needs-validation" novalidate>
    <div class="row justify-content-md-center">
        <div class="col col-md-3">
            <div class="form-group mb-2 text-center">
                <h3>請輸入暱稱</h3>
                <input id="txtUser"
                       class="form-control"
                       type="text"
                       required
                       minlength="2"
                       maxlength="50" />
                <div class="invalid-feedback">請輸入2至50個字元</div>
                <div class="valid-feedback">OK</div>
            </div>
            <!-- 用於1對1聊天 -->
            <div class="form-group mb-2 text-center">
                <h3>請輸入聊天室ID</h3>
                <input id="txtRoom" class="form-control" type="text" required />
                <div class="invalid-feedback">請輸入聊天室ID</div>
            </div>
            <div class="form-group text-center">
                <button type="submit" class="btn btn-dark">進入聊天室</button>
            </div>
        </div>
    </div>
</form>

<div class="row" id="chatRoom">
    <div class="col-md-12">
        <div class="card">
            <div class="card-header">
                <div class="d-flex justify-content-between">
                    <label>聊天室</label>
                    <label>暱稱: <span id="userName"></span></label>
                </div>
            </div>
            <div class="card-body">
                <div class="mb-3" id="room"></div>
                <div class="input-group">
                    <input id="txtMsg"
                           class="form-control"
                           type="text"
                           value="hello html5 websocket" />
                    <button class="btn btn-secondary" type="button" id="send">
                        <svg xmlns="http://www.w3.org/2000/svg"
                             style="height: 18px"
                             viewBox="0 0 512 512">
                            <path fill="#fff"
                                  d="M498.1 5.6c10.1 7 15.4 19.1 13.5 31.2l-64 416c-1.5 9.7-7.4 18.2-16 23s-18.9 5.4-28 1.6L284 427.7l-68.5 74.1c-8.9 9.7-22.9 12.9-35.2 8.1S160 493.2 160 480V396.4c0-4 1.5-7.8 4.2-10.7L331.8 202.8c5.8-6.3 5.6-16-.4-22s-15.7-6.4-22-.7L106 360.8 17.7 316.6C7.1 311.3 .3 300.7 0 288.9s5.9-22.8 16.1-28.7l448-256c10.7-6.1 23.9-5.5 34 1.4z" />
                        </svg>
                    </button>
                </div>
            </div>
            <div class="card-footer"></div>
        </div>
    </div>
</div>

<div id="liveToast"
     class="toast align-items-center text-white bg-danger border-0 bottom-0 start-0"
     role="alert"
     aria-live="assertive"
     aria-atomic="true">
    <div class="d-flex">
        <div class="toast-body">請輸入傳送訊息！</div>
        <button type="button"
                class="btn-close btn-close-white me-2 m-auto"
                data-bs-dismiss="toast"
                aria-label="Close"></button>
    </div>
</div>



@section scripts {
    <script type="text/javascript"
            src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script type="text/javascript"
            src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.11/signalr.min.js"></script>
    <script>

          const myFile = document.querySelector("#myFile");
          const form = document.querySelector(".needs-validation");
          const chatRoom = document.querySelector("#chatRoom");
          const txtUser = document.querySelector("#txtUser"); //SR用
          const userName = document.querySelector("#userName");
          const txtMsg = document.querySelector("#txtMsg"); //SR用
          const liveToast = document.querySelector("#liveToast");
          const room = document.querySelector("#room");
          const send = document.querySelector("#send"); //SR用
          const result = document.querySelector("#result"); //SR用

          init();

          function init() {
            //隱藏chatRoom
            chatRoom.style.display = "none";

            //驗證form
            form.addEventListener(
              "submit",
              (event) => {
                event.preventDefault();
                if (!form.checkValidity()) {
                  event.stopPropagation();
                } else {
                  let timerInterval;
                  Swal.fire({
                    title: "系統通知",
                    html: "即將進入聊天室 <b></b> milliseconds.",
                    timer: 2000,
                    timerProgressBar: true,
                    didOpen: () => {
                      Swal.showLoading();
                      const timer = Swal.getPopup().querySelector("b");
                      timerInterval = setInterval(() => {
                        timer.textContent = `${Swal.getTimerLeft()}`;
                      }, 100);
                    },
                    willClose: () => {
                      clearInterval(timerInterval);
                    },
                  }).then((result) => {
                    enterRoom(txtUser.value, txtRoom.value); // 傳遞用戶名稱和聊天室名稱
                  });
                }
                form.classList.add("was-validated");
              },
              false
            );
          }

          function enterRoom(userName, roomName) {
                  const connection = new signalR.HubConnectionBuilder()
              .withUrl(`https://localhost:7279/ChatRoom?room=${roomName}`) // 此處開頭可以接受 https 不需要為 wss ，signalR 底層邏輯會直接置換成 wss
              .build();

            //與Server建立連線
            connection
              .start()
              .then(function () {
                console.log("Hub 連線完成");
                userName.textContent = userName;

                //顯示chatRoom
                chatRoom.style.display = "flex";

                //隱藏form
                form.style.display = "none";
              })

              .catch(function (err) {
                alert("連線錯誤: " + err.toString());
              });

            //更新聊天內容事件
            connection.on("UpdContent", function (msg) {
              if (msg.user == txtUser.value) {
                console.log("me");
                console.log(msg);
                const bubble = `
    <div class="mine messages">
        ${msg.timestamp} 我

        <div class="message last">${msg.message}</div>
    </div>
                            `;
                room.innerHTML += bubble;
              } else if (msg.user != txtUser.value && msg.user != null) {
                console.log("they");
                const bubble = `
    <div class="yours messages">

        ${msg.timestamp} ${msg.user}

        <div class="message last">${msg.message}</div>
    </div>
                            `;
                room.innerHTML += bubble;
              }
            });

            //傳送訊息
            send.addEventListener("click", function (event) {
              const user = txtUser.value;
              const message = txtMsg.value;
              connection.invoke("SendMessage", user, message).catch(function (err) {
                alert("傳送錯誤: " + err.toString());
              });
            });

            //#endregion SignalR
          }
    </script>
}